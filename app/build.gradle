plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id("androidx.navigation.safeargs.kotlin")
}
apply plugin: 'com.android.application'
apply plugin: 'com.google.dagger.hilt.android'

android {
    namespace 'com.phonecleaner.storagecleaner.cache'
    compileSdk 33

    defaultConfig {
        applicationId "com.phonecleaner.storagecleaner.cache"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        String dropboxKey = localProperties['DROPBOX_APP_KEY']
        if (dropboxKey == null) {
            logger.warn("No value provided for DROPBOX_APP_KEY.  Specify a value in a examples/android/local.properties file. You can register for one at https://developers.dropbox.com/")
            dropboxKey = "4u4cdn54pwgsumt"
        }
        buildConfigField "String", "DROPBOX_APP_KEY", "\"${dropboxKey}\""
        manifestPlaceholders = [dropboxKey: dropboxKey]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding = true
        dataBinding = true

    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation("androidx.viewpager2:viewpager2:1.0.0")
    implementation 'com.airbnb.android:lottie:6.0.1'
}

dependencies {
    implementation 'androidx.navigation:navigation-ui-ktx:2.6.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.6.0'
    def fragment_version = "1.5.7"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
}


// Navigation
dependencies {
    def nav_version = "2.5.3"
    // Kotlin
    implementation("androidx.navigation:navigation-fragment-ktx:$nav_version")
    implementation("androidx.navigation:navigation-ui-ktx:$nav_version")
    // Feature module Support
    implementation("androidx.navigation:navigation-dynamic-features-fragment:$nav_version")
    // Testing Navigation
    androidTestImplementation("androidx.navigation:navigation-testing:$nav_version")
    // Jetpack Compose Integration
    implementation("androidx.navigation:navigation-compose:$nav_version")

    implementation("app.futured.donut:donut:2.2.3")

    // If you want to use Jetpack Compose version then use only this one dependency
    implementation("app.futured.donut:donut-compose:2.2.3")
}
// Hilt & Dagger
dependencies {
    implementation 'com.google.dagger:hilt-android:2.46.1'
    kapt 'com.google.dagger:hilt-compiler:2.46.1'

    // For instrumentation tests
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.46.1'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.46.1'

    // For local unit tests
    testImplementation 'com.google.dagger:hilt-android-testing:2.46.1'
    kaptTest 'com.google.dagger:hilt-compiler:2.46.1'
}

kapt {
    correctErrorTypes true
}

// Room database
dependencies {
    def room_version = "2.5.2"

    implementation("androidx.room:room-runtime:$room_version")
    annotationProcessor("androidx.room:room-compiler:$room_version")

    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$room_version")

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$room_version")

    // optional - RxJava2 support for Room
    implementation("androidx.room:room-rxjava2:$room_version")

    // optional - RxJava3 support for Room
    implementation("androidx.room:room-rxjava3:$room_version")

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation("androidx.room:room-guava:$room_version")

    // optional - Test helpers
    testImplementation("androidx.room:room-testing:$room_version")

    // optional - Paging 3 Integration
    implementation("androidx.room:room-paging:$room_version")
}

// Kotlin coroutine
dependencies {
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4")
}

// ViewModel dependency
dependencies {
    def lifecycle_version = '2.6.1'
    def arch_version = '2.2.0'
    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    // ViewModel utilities for Compose
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version")
    // LiveData
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")
    // Lifecycles only (without ViewModel or LiveData)
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version")
    // Saved state module for ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version")
    // Annotation processor
    kapt("androidx.lifecycle:lifecycle-compiler:$lifecycle_version")
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation("androidx.lifecycle:lifecycle-service:$lifecycle_version")
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation("androidx.lifecycle:lifecycle-process:$lifecycle_version")
    // optional - ReactiveStreams support for LiveData
    implementation("androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version")
    // optional - Test helpers for LiveData
    testImplementation("androidx.arch.core:core-testing:$arch_version")
    // optional - Test helpers for Lifecycle runtime
    testImplementation("androidx.lifecycle:lifecycle-runtime-testing:$lifecycle_version")
    // Kotlin
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1"
}
// Pdf view
dependencies {
    implementation 'com.github.mhiew:android-pdf-viewer:3.2.0-beta.1'
}
// Glide library load image
dependencies {
    implementation 'com.github.bumptech.glide:glide:4.15.1'
    kapt 'com.github.bumptech.glide:compiler:4.14.2'
}
// Timber log
dependencies {
    implementation 'com.jakewharton.timber:timber:5.0.1'
}

dependencies {
    implementation 'androidx.databinding:databinding-runtime:8.0.2'
    implementation 'com.google.code.gson:gson:2.9.0'
}

// Preferences DataStore
dependencies {
    implementation 'com.tencent:mmkv:1.3.0'
    implementation("androidx.datastore:datastore-preferences-core:1.0.0")
    implementation("androidx.datastore:datastore-preferences:1.0.0")
    // optional - RxJava2 support
    implementation("androidx.datastore:datastore-preferences-rxjava2:1.0.0")
    // optional - RxJava3 support
    implementation("androidx.datastore:datastore-preferences-rxjava3:1.0.0")
}
// Zip file
dependencies {
    implementation("net.lingala.zip4j:zip4j:2.11.5")
}
// Shimmer animation
dependencies {
    implementation 'com.facebook.shimmer:shimmer:0.5.0'
}
// Drop box 
dependencies {
    implementation 'com.hwangjr.rxbus:rxbus:3.0.0'
    implementation 'com.koushikdutta.async:androidasync:3.1.0'
    implementation 'com.dropbox.core:dropbox-core-sdk:5.4.1'
    implementation 'com.koushikdutta.async:androidasync:3.1.0'

    def ok_httpclient_version = '5.0.0-alpha.2'
    implementation "com.squareup.okhttp3:okhttp:$ok_httpclient_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$ok_httpclient_version"
}
def getLocalProperties() {
    Properties props = new Properties()
    if (file('local.properties').exists()) {
        props.load(new FileInputStream(file('local.properties')))
    }
    return props
}